/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/bootstrap-formhelpers-phone.js":
/*!*****************************************************!*\
  !*** ./resources/js/bootstrap-formhelpers-phone.js ***!
  \*****************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/* ==========================================================\n * bootstrap-formhelpers-phone.js\n * https://github.com/vlamanna/BootstrapFormHelpers\n * ==========================================================\n * Copyright 2012 Vincent Lamanna\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================== */\n+function ($) {\n  'use strict';\n  /* PHONE CLASS DEFINITION\n   * ====================== */\n\n  var BFHPhone = function BFHPhone(element, options) {\n    this.options = $.extend({}, $.fn.bfhphone.defaults, options);\n    this.$element = $(element);\n\n    if (this.$element.is('input[type=\"text\"]') || this.$element.is('input[type=\"tel\"]')) {\n      this.addFormatter();\n    }\n\n    if (this.$element.is('span')) {\n      this.displayFormatter();\n    }\n  };\n\n  BFHPhone.prototype = {\n    constructor: BFHPhone,\n    addFormatter: function addFormatter() {\n      var $country;\n\n      if (this.options.country !== '') {\n        $country = $(document).find('#' + this.options.country);\n\n        if ($country.length !== 0) {\n          this.options.format = BFHPhoneFormatList[$country.val()];\n          $country.on('change', {\n            phone: this\n          }, this.changeCountry);\n        } else {\n          this.options.format = BFHPhoneFormatList[this.options.country];\n        }\n      }\n\n      this.$element.on('keyup.bfhphone.data-api', BFHPhone.prototype.change);\n      this.loadFormatter();\n    },\n    loadFormatter: function loadFormatter() {\n      var formattedNumber;\n      formattedNumber = formatNumber(this.options.format, this.$element.val());\n      this.$element.val(formattedNumber);\n    },\n    displayFormatter: function displayFormatter() {\n      var formattedNumber;\n\n      if (this.options.country !== '') {\n        this.options.format = BFHPhoneFormatList[this.options.country];\n      }\n\n      formattedNumber = formatNumber(this.options.format, this.options.number);\n      this.$element.html(formattedNumber);\n    },\n    changeCountry: function changeCountry(e) {\n      var $this, $phone;\n      $this = $(this);\n      $phone = e.data.phone;\n      $phone.$element.val(String($phone.$element.val()).replace(/\\+\\d*/g, ''));\n      $phone.options.format = BFHPhoneFormatList[$this.val()];\n      $phone.loadFormatter();\n    },\n    change: function change(e) {\n      var $this, cursorPosition, cursorEnd, formattedNumber;\n      $this = $(this).data('bfhphone');\n\n      if ($this.$element.is('.disabled') || $this.$element.attr('disabled') !== undefined) {\n        return true;\n      }\n\n      cursorPosition = getCursorPosition($this.$element[0]);\n      cursorEnd = false;\n\n      if (cursorPosition === $this.$element.val().length) {\n        cursorEnd = true;\n      }\n\n      if (e.which === 8 && $this.options.format.charAt($this.$element.val().length) !== 'd') {\n        $this.$element.val(String($this.$element.val()).substring(0, $this.$element.val().length - 1));\n      }\n\n      formattedNumber = formatNumber($this.options.format, $this.$element.val());\n\n      if (formattedNumber === $this.$element.val()) {\n        return true;\n      }\n\n      $this.$element.val(formattedNumber);\n\n      if (cursorEnd) {\n        cursorPosition = $this.$element.val().length;\n      }\n\n      setCursorPosition($this.$element[0], cursorPosition);\n      return true;\n    }\n  };\n\n  function formatNumber(format, number) {\n    var formattedNumber, indexFormat, indexNumber, lastCharacter;\n    formattedNumber = '';\n    number = String(number).replace(/\\D/g, '');\n\n    for (indexFormat = 0, indexNumber = 0; indexFormat < format.length; indexFormat = indexFormat + 1) {\n      if (/\\d/g.test(format.charAt(indexFormat))) {\n        if (format.charAt(indexFormat) === number.charAt(indexNumber)) {\n          formattedNumber += number.charAt(indexNumber);\n          indexNumber = indexNumber + 1;\n        } else {\n          formattedNumber += format.charAt(indexFormat);\n        }\n      } else if (format.charAt(indexFormat) !== 'd') {\n        if (number.charAt(indexNumber) !== '' || format.charAt(indexFormat) === '+') {\n          formattedNumber += format.charAt(indexFormat);\n        }\n      } else {\n        if (number.charAt(indexNumber) === '') {\n          formattedNumber += '';\n        } else {\n          formattedNumber += number.charAt(indexNumber);\n          indexNumber = indexNumber + 1;\n        }\n      }\n    }\n\n    lastCharacter = format.charAt(formattedNumber.length);\n\n    if (lastCharacter !== 'd') {\n      formattedNumber += lastCharacter;\n    }\n\n    return formattedNumber;\n  }\n\n  function getCursorPosition($element) {\n    var position = 0,\n        selection;\n\n    if (document.selection) {\n      // IE Support\n      $element.focus();\n      selection = document.selection.createRange();\n      selection.moveStart('character', -$element.value.length);\n      position = selection.text.length;\n    } else if ($element.selectionStart || $element.selectionStart === 0) {\n      position = $element.selectionStart;\n    }\n\n    return position;\n  }\n\n  function setCursorPosition($element, position) {\n    var selection;\n\n    if (document.selection) {\n      // IE Support\n      $element.focus();\n      selection = document.selection.createRange();\n      selection.moveStart('character', -$element.value.length);\n      selection.moveStart('character', position);\n      selection.moveEnd('character', 0);\n      selection.select();\n    } else if ($element.selectionStart || $element.selectionStart === 0) {\n      $element.selectionStart = position;\n      $element.selectionEnd = position;\n      $element.focus();\n    }\n  }\n  /* PHONE PLUGIN DEFINITION\n   * ======================= */\n\n\n  var old = $.fn.bfhphone;\n\n  $.fn.bfhphone = function (option) {\n    return this.each(function () {\n      var $this, data, options;\n      $this = $(this);\n      data = $this.data('bfhphone');\n      options = _typeof(option) === 'object' && option;\n\n      if (!data) {\n        $this.data('bfhphone', data = new BFHPhone(this, options));\n      }\n\n      if (typeof option === 'string') {\n        data[option].call($this);\n      }\n    });\n  };\n\n  $.fn.bfhphone.Constructor = BFHPhone;\n  $.fn.bfhphone.defaults = {\n    format: '',\n    number: '',\n    country: ''\n  };\n  /* PHONE NO CONFLICT\n   * ========================== */\n\n  $.fn.bfhphone.noConflict = function () {\n    $.fn.bfhphone = old;\n    return this;\n  };\n  /* PHONE DATA-API\n   * ============== */\n\n\n  $(document).ready(function () {\n    $('form input[type=\"text\"].bfh-phone, form input[type=\"tel\"].bfh-phone, span.bfh-phone').each(function () {\n      var $phone;\n      $phone = $(this);\n      $phone.bfhphone($phone.data());\n    });\n  });\n}(window.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/bootstrap-formhelpers-phone.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/bootstrap-formhelpers-phone.js"]();
/******/ 	
/******/ })()
;